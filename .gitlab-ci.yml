stages:          # List of stages for jobs, and their order of execution
  - scheduled_job_for_image
  - build
  # - test
  - deploy

variables:
  DOCKER_REGISTRY: 555726879390.dkr.ecr.us-east-1.amazonaws.com
  AWS_DEFAULT_REGION: us-east-1
  APP_NAME: clarusway-repo/petclinic-app-dev
  DOCKER_HOST: tcp://docker:2375

build_react_image:
  image: 
    name: amazon/aws-cli
    entrypoint: [""]
  stage: scheduled_job_for_image

  services:
    - docker:dind
  before_script:
    - amazon-linux-extras install docker
    - aws --version
    - docker --version
    - pwd && ls -ltar && df -h
  script:
    - docker build -t $DOCKER_REGISTRY/$APP_NAME:$CI_PIPELINE_IID . 
    - aws ecr get-login-password | docker login --username AWS --password-stdin $DOCKER_REGISTRY
    - docker push $DOCKER_REGISTRY/$APP_NAME:$CI_PIPELINE_IID
  rules:
    - if: ($CI_COMMIT_BRANCH == "dev") && ($CI_PIPELINE_SOURCE == "schedule")
      changes:
      - src/*


build_terraform_env:
  stage: build
  image: 
    name: amazon/aws-cli
    entrypoint: [""]
  tags:
    - "docker_runner_01"
  services:
    - docker:dind
  before_script:
    - amazon-linux-extras install docker
    - yum install -y yum-utils
    - yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
    - yum -y install terraform
    - aws --version
    - docker --version
    - terraform --version
    - pwd && ls -ltar && df -h
  script:
    - aws ecr get-login-password | docker login --username AWS --password-stdin $DOCKER_REGISTRY
  allow_failure: false
  
  rules:
   - if: ($CI_COMMIT_BRANCH == "dev")
     when: manual
   - when: never

  cache:
    key: $CI_COMMIT_REF_SLUG

initalize_terraform:
  stage: build
  tags:
  - "docker_runner_01"

  before_script:
    - aws --version
    - terraform --version
    - pwd && ls -ltar && df -h
  
  script:
    - terraform init
  
  rules:
   - if: ($CI_COMMIT_BRANCH == "dev")
     when: always
   - when: never
  needs: ['build_terraform_env']


test:
  stage: build
  tags:
    - shell_runner_01
  script:
    - pwd && ls -altr
    # install terraform
    # - sudo apt-get update && sudo apt-get install -y gnupg software-properties-common curl
    # - curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
    # - sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
    # - sudo apt-get update && sudo apt-get install terraform
    # - sudo terraform --version
    # # install docker
    # - sudo apt-get remove docker docker-engine docker.io containerd runc
    # - sudo apt-get install ca-certificates curl gnupg lsb-release
    # - sudo mkdir -p /etc/apt/keyrings
    # - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    # - sudo add-apt-repository \
    #   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
    #   $(lsb_release -cs) \
    #   stable"
    # - sudo apt-get update -y
    # - sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
    - sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
    - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
    - sudo apt-key fingerprint 0EBFCD88
    - sudo add-apt-repository \
      "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
    - sudo apt-get update
    - sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
    - sudo groupadd docker
    - sudo usermod -aG docker $USER
    - sudo systemctl enable docker
    - docker --version