image: 
  name: amazon/aws-cli
  entrypoint: [""]

stages:          # List of stages for jobs, and their order of execution
  - scheduled_job_for_image
  - build
  # - test
  - deploy

variables:
  DOCKER_REGISTRY: 555726879390.dkr.ecr.us-east-1.amazonaws.com
  AWS_DEFAULT_REGION: us-east-1
  APP_NAME: clarusway-repo/petclinic-app-dev
  DOCKER_HOST: tcp://docker:2375

build_react_image:
  stage: scheduled_job_for_image
  tags:
    - "docker_runner_01"
  services:
    - docker:dind
  before_script:
    - amazon-linux-extras install docker
    - aws --version
    - docker --version
    - pwd && ls -ltar && df -h
  script:
    - docker build -t $DOCKER_REGISTRY/$APP_NAME:$CI_PIPELINE_IID . 
    - aws ecr get-login-password | docker login --username AWS --password-stdin $DOCKER_REGISTRY
    - docker push $DOCKER_REGISTRY/$APP_NAME:$CI_PIPELINE_IID
  rules:
    - if: ($CI_COMMIT_BRANCH == "dev") && ($CI_PIPELINE_SOURCE == "schedule")
      changes:
      - src/*


build_terraform_env:
  stage: build
  # image: 
  #   name: amazon/aws-cli
  #   entrypoint: [""]
  tags:
    - "docker_runner_01"
  services:
    - docker:dind
  before_script:
    - amazon-linux-extras install docker
    - yum install -y yum-utils
    - yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
    - yum -y install terraform
    - aws --version
    - docker --version
    - terraform --version
    - pwd && ls -ltar && df -h
  script:
    - aws ecr get-login-password | docker login --username AWS --password-stdin $DOCKER_REGISTRY
  allow_failure: false
  
  rules:
   - if: ($CI_COMMIT_BRANCH == "dev")
     when: always
   - when: never

  cache:
    key: $CI_COMMIT_REF_SLUG

initalize_terraform:
  stage: build
  tags:
  - "docker_runner_01"
  
  before_script:
    - aws --version
    - terraform --version
    - pwd && ls -ltar && df -h
  
  script:
    - terraform init
  
  rules:
   - if: ($CI_COMMIT_BRANCH == "dev")
     when: always
   - when: never
  needs: ['build_terraform_env']