
stages:          # List of stages for jobs, and their order of execution
  - scheduled_for_build_image
  - app_build
  - app_test
  - terraform_build
  - terraform_deploy

variables:
  DOCKER_REGISTRY: 555726879390.dkr.ecr.us-east-1.amazonaws.com
  AWS_DEFAULT_REGION: us-east-1
  APP_NAME: clarusway-repo/petclinic-app-dev
  DOCKER_HOST: tcp://docker:2375

build_react_image:
  image: 
    name: amazon/aws-cli
    entrypoint: [""]

  stage: scheduled_for_build_image
  services:
    - docker:dind
  before_script:
    - amazon-linux-extras install docker
    - aws --version
    - docker --version
    - pwd && ls -ltar && df -h
  script:
    - docker build -t $DOCKER_REGISTRY/$APP_NAME:$CI_PIPELINE_IID . 
    - aws ecr get-login-password | docker login --username AWS --password-stdin $DOCKER_REGISTRY
    - docker push $DOCKER_REGISTRY/$APP_NAME:$CI_PIPELINE_IID
  rules:
    - if: ($CI_COMMIT_BRANCH == "main") && ($CI_PIPELINE_SOURCE == "schedule")
      changes:
      - src/*

building_app:
  stage: app_build
  image: node:16
  script: 
    - npm install 
    - npm run build
    - ls -altr && pwd && whoami
    - echo "Build successfully!"
  rules:
    - if: ($CI_COMMIT_BRANCH == "main")
      when: always
    - when: never

  artifacts:
    expire_in: 6 hours
    paths:
      - build/ 
  
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - node_modules/
    policy: pull



testing_app: 
  stage: app_test
  image: node:16
  before_script:
    - npm install
    - ls -altr && pwd && whoami
    - ls -altr $(pwd)/build
  script:
    - echo "Testing App"
    - CI=true npm test # Run tests without interactive prompt
  dependencies:
    - building_app
  rules:
    - if: ($CI_COMMIT_BRANCH == "main")
      when: always
    - when: never

build_terraform_env:
  stage: terraform_build
  tags:
    - shell_runner_01
  before_script:
    - pwd && ls -altr && whoami
    # install terraform
    - sudo apt-get update && sudo apt-get install -y gnupg software-properties-common curl
    - curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
    - sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
    - sudo apt-get update && sudo apt-get install terraform
    - sudo terraform --version
    # define access keys
    - export AWS_ACCESS_KEY=${AWS_ACCESS_KEY_ID}
    - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    - cd ./Terraform
    - terraform init 
    - terraform fmt
  script:
    - terraform plan

  dependencies:
    - testing_app

  rules:
    - if: ($CI_COMMIT_BRANCH == "main")
      when: always
    - when: never

  cache:
    key: $CI_COMMIT_REF_SLUG

deploy_terraform_env:
  stage: terraform_deploy
  tags:
    - shell_runner_01
  before_script:
    - pwd && ls -altr && whoami
    # install terraform
    - sudo apt-get update && sudo apt-get install -y gnupg software-properties-common curl
    - curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
    - sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
    - sudo apt-get update && sudo apt-get install terraform
    - sudo terraform --version
    # define access keys
    - export AWS_ACCESS_KEY=${AWS_ACCESS_KEY_ID}
    - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}

    - cd ./Terraform
    - terraform init 

  script:
    - terraform apply -auto-approve
    - terraform output
    - sleep 60
    - terraform destroy -auto-approve
  dependencies:
    - build_terraform_env
  rules:
    - if: ($CI_COMMIT_BRANCH == "main")
      when: manual
    - when: never


